#!/usr/bin/env perl
use v5.20;
use Mojolicious::Lite;
use List::Util qw/max/;
use experimental 'signatures';
use lib '.';
use Room;

$ENV{MOJO_INACTIVITY_TIMEOUT} = 120;
sub debug($) { app->log->debug(@_) }

my %players;     # $id => $tx
my $room = Room->new;

app->hook(after_dispatch => sub($c) {
  $c->res->headers->header('Access-Control-Allow-Origin' => '*');
});

helper notify => sub ($c,$who,$what,$winner,$them,$theirs) {
  return $players{$who}->send({ json => {
    you => 'tie', opponent => $them, yours => $what, theirs => $what
  }}) if $winner eq 'tie';
  my $status = $what eq $winner ? 'win' : 'lose';
  $players{$who}->send({ json => {
    you => $status, opponent => $them, yours => $what, theirs => $theirs}});
};

helper new_player => sub($c) {
  state $i = 1;
  return $i++;
};

my %better_than = ( rock => 'scissors', paper => 'rock', 'scissors' => 'paper' );
helper winner => sub($c,$one,$two) {
  return $one if $better_than{$one} eq $two;
  return $two if $better_than{$two} eq $one;
  return 'tie';
};

helper shoot => sub ($c,$p1,$p2,$h1,$h2) {
  # play: player 1,2 hand 1,2
  my $winner = $c->winner($h1,$h2);
  $c->notify($p1, $h1, $winner, $p2, $h2);
  $c->notify($p2, $h2, $winner, $p1, $h1);
  debug $room->game_over($p1,$p2);
};

get '/' => sub ($c) {
  $c->render(text => "Welcome to ro.  Make a websocket connection to /ready.\n");
};

websocket '/ready' => sub($c) {
  # $us, $them are ids
  # $ours, $theirs are rock/paper/scissors
  $c->on(message => sub ($c,$msg) {

     # Establish connection but don't pair until we play.
     $msg eq 'hello' or return debug 'did not say hello';
     my $us = $c->new_player;
     debug "New player: $us";
     my $tx = $c->tx;
     $tx->send({ json => { welcome => $us } });
     $players{$us} = $tx;
     $tx->unsubscribe('message');

     $tx->on(message => sub ($tx, $ours) {
       $ours =~ /^(rock|paper|scissors)$/ or return $tx->send({ json => { error => "wat? ($ours)" } });
       debug "$us plays $ours";
       if (my $them = $room->has_partner($us)) {
           $room->reveal($us, $ours);
           if (my $theirs = $room->played($them) ) {
               $c->shoot($us,$them,$ours,$theirs);
           } else {
               $room->on("play_by:$them" => sub ($tx, $theirs) {
                  $c->shoot($us,$them,$ours,$theirs);
                  $room->unsubscribe("play_by:$them");
               });
           }
       } else {
           $room->enter($us, $ours);
           $room->on("seek", sub ($room, $them, $theirs) {
               $room->pair_up($us,$them) or return;
               $c->shoot($us,$them,$ours,$theirs);
           });
       }
     });
  });
};

app->start;

__DATA__
@@ exception.html.ep
%== $exception
